dat <- data.frame(Z, X, Y)
fitX.LZ <- glm(X ~ Z, data = dat, family = "binomial")
fitY.LX <- glm(Y ~ X, family = "binomial", data = dat)
fitIV.ts <- ivglm("ts", fitX.LZ=fitX.LZ, fitY.LX=fitY.LX, data=dat,
link = "identity")
ts <- fitIV.ts$est[2]
fitX.L <- glm(X ~ 1, data= dat, family = "binomial")
fitY.LZX <- glm(Y ~ X, family = "binomial", data = dat)
fitIV.g <- ivglm(estmethod="g", Y="Y", fitX.LZ=fitX.LZ,
fitY.LZX = fitY.LZX, fitX.L = fitX.L, data=dat, link="logit")
gg <- fitIV.g$est
bnds <- bpbounds(prop.table(xtabs( ~ X + Y + Z, data = dat), margin = 3))
c(ts, gg, bnds$bplb, bnds$bpub)
}))
summary(res)
stan<-ipw1<-ipw2<-NULL
for(i in 1:500){
n<-500
M<-rbinom(n,1,0.5)
Q<-rbinom(n,1,0.3)
X<-rbinom(n,1,Q*0.1+M*0.1+0.3)
Y<-rbinom(n,1,X*0.1+Q*0.1+M*0.1+0.1)
dd<-as.data.frame(cbind(Y,X,M,Q))
modx<-glm(X~Q*M, data=dd)
dd$wx1<-1/predict(modx, newdata=dd,type=’response’)
modx<-glm(X~Q*M, data=dd)
n<-500
M<-rbinom(n,1,0.5)
Q<-rbinom(n,1,0.3)
X<-rbinom(n,1,Q*0.1+M*0.1+0.3)
Y<-rbinom(n,1,X*0.1+Q*0.1+M*0.1+0.1)
dd<-as.data.frame(cbind(Y,X,M,Q))
modx<-glm(X~Q*M, data=dd)
dd$wx1<-1/predict(modx, newdata=dd,type=’response’)
dd$wx1<-1/predict(modx, newdata=dd,type='response')
mody<-glm(Y~X*M*Q, family="binomial", data=dd)
fit.std <- stdGlm(fit=mody, data=dd, X="X", x=seq(0,1))
library(stdReg)
fit.std <- stdGlm(fit=mody, data=dd, X="X", x=seq(0,1))
stan[i]<-print(summary(fit.std))[2,1]
ipw1[i]<-sum(dd$X*dd$Y*dd$wx1)/sum(dd$wx1*dd$X)
ipw2[i]<-sum(dd$X*dd$Y*dd$wx1)/n
library(stdReg)
stan<-ipw1<-ipw2<-NULL
for(i in 1:500){
n<-500
M<-rbinom(n,1,0.5)
Q<-rbinom(n,1,0.3)
X<-rbinom(n,1,Q*0.1+M*0.1+0.3)
Y<-rbinom(n,1,X*0.1+Q*0.1+M*0.1+0.1)
dd<-as.data.frame(cbind(Y,X,M,Q))
modx<-glm(X~Q*M, data=dd)
dd$wx1<-1/predict(modx, newdata=dd,type='response')
mody<-glm(Y~X*M*Q, family="binomial", data=dd)
fit.std <- stdGlm(fit=mody, data=dd, X="X", x=seq(0,1))
stan[i]<-print(summary(fit.std))[2,1]
ipw1[i]<-sum(dd$X*dd$Y*dd$wx1)/sum(dd$wx1*dd$X)
ipw2[i]<-sum(dd$X*dd$Y*dd$wx1)/n
}
stan-ipw2<0.00001
ipw2-ipw1<0.00001
stan
ipw
plot(stan ~ ipw1)
plot(stan ~ ipw2)
summary(fit.std)
sum(dd$wx1*dd$X)
library(causaloptim)
graph_from_literal(Ul -+ A1:A2, A1 -+ A2, A1 -+ A3, A2 -+ A3, Ur -+ A3:A4, A2 -+ A4) |> initialize_graph() |>
create_causalmodel(prob.form = list(cond = c("A1", "A2"), out = c("A3", "A4")))
library(ADMGs2)
gr1 <- graphCr("A1 -> Z1, A1 -> Z2, Z1 <-> Z2, Z1 -> X, Z2 -> X, X -> Y, X <-> Y")
gr1
moebius(gr1, r = TRUE)
ADMGs2:::maps(gr1)
districts(gr1)
iv1 <- graphCr("Z -> X, X -> Y, X <-> Y")
iv1
moebius(iv1, r = FALSE)
moebius(iv1, r = TRUE)
districts(iv1)
?districts
n <- 1000
n <- 1000
U0 <- rbinom(n, 1, .4)
A0 <- rbinom(n, 1, .5)
L1 <- rnorm(n, 0.25 + .3 * A0 - .2 * U0 - .05 * A0 * U0, )
summary(L1)
L1 <- rnorm(n, 0.25 + .3 * A0 - .2 * U0 - .05 * A0 * U0, 1)
A1 <- rbinom(n, 1, plogis(0.4 + .5 * A0 - 0.3 * L1 - .4 * A0 * L1))
mean(A1)
library(causaloptim)
graph_from_literal(Ul -+ A1:A2, A1 -+ A2, A1 -+ A3, A2 -+ A3, Ur -+ A3:A4, A2 -+ A4) |> initialize_graph() |>
create_causalmodel(prob.form = list(cond = c("A1", "A2"), out = c("A3", "A4")))
plot(graph_from_literal(Ul -+ A1:A2, A1 -+ A2, A1 -+ A3, A2 -+ A3, Ur -+ A3:A4, A2 -+ A4) )
plot(graph_from_literal(Z -+ X, X -+ Y, Ur -+ X:Y) )
ivmod <- graph_from_literal(Z -+ X, X -+ Y, Ur -+ X:Y) |> initialize_graph()
V(ivmod)
plot(graph_from_literal(Z -+ X, X -+ Y, Ur -+ X:Y) )
ivmod <- graph_from_literal(Z -+ X, X -+ Y, Ur -+ X:Y) |> initialize_graph()
V(ivmod)$nvals[1] <- 5
create_causalmodel(prob.form = list(cond = c("Z"), out = c("X", "Y")))
create_causalmodel(ivmod, prob.form = list(cond = c("Z"), out = c("X", "Y")))
library(causaloptim)
graph_from_literal(a -+ A, b -+ B, Ur -+ A:B) |> initialize_graph()
graph <- graph_from_literal(a -+ A, b -+ B, Ur -+ A:B) |> initialize_graph()
plot(graph)
plot(graph)
create_causalmodel(graph, prob.form = list(cond = c("a", "b"), out = c("A", "B")))
?rcdd::Hrep
library(rcdd)
?scdd
ivgraph <- graph_from_literal(Z-+ X, X -+ Y, Ur -+ X:Y) |> initialize_graph()
plot(ivgraph)
create_causalmodel(ivgraph, prob.form = list(cond = "Z", out = c("X", "Y")))
create_causalmodel(bellgraph, prob.form = list(cond = c("a", "b"), out = c("A", "B")))
bellgraph <- graph_from_literal(a -+ A, b -+ B, Ur -+ A:B) |> initialize_graph()
plot(bellgraph)
create_causalmodel(bellgraph, prob.form = list(cond = c("a", "b"), out = c("A", "B")))
cmbell <- create_causalmodel(bellgraph, prob.form = list(cond = c("a", "b"), out = c("A", "B")))
cmbell$observable_constraints$numeric
source("~/.active-rstudio-document", echo=TRUE)
mean(Y)
Y
Y <- rbinom(n, 1, plogis(-1 + C))
S <- rbinom(n, 1, plogis(1 + C))
mean(Y)
mean(S)
mean(Y[S == 1])
n <- 1000
C <- rnorm(n)
Y <- rbinom(n, 1, plogis(-1 + C))
S <- rbinom(n, 1, plogis(1 + C))
n <- 10000
C <- rnorm(n)
Y <- rbinom(n, 1, plogis(-1 + C))
S <- rbinom(n, 1, plogis(1 + C))
mean(Y)
mean(Y[S == 1])
mean(plogis(-1 + C))
library(shiny)
?numericInput
library(exact2x2)
uncondExact2x2(
x1 = 38, n1 = 75, x2 = 27, n2 = 78,
parmtype = "ratio", method = "score", midp = FALSE,
conf.int = TRUE
)
uncondExact2x2(
x1 = 37, n1 = 75, x2 = 27, n2 = 78,
parmtype = "ratio", method = "score", midp = FALSE,
conf.int = TRUE
)
sqrt(0)
sqrt(+1)
sqrt(-1)
?uncondExact2x2
sqrt(Inf)
sqrt(-Inf)
uncondExact2x2(
x1 = 37, n1 = 76, x2 = 27, n2 = 78,
parmtype = "ratio", method = "score", midp = FALSE,
conf.int = TRUE
)
uncondExact2x2(
x1 = 38, n1 = 76, x2 = 27, n2 = 78,
parmtype = "ratio", method = "score", midp = FALSE,
conf.int = TRUE
)
lchoose
?lchoose
uncondExact2x2(
x1 = 38, n1 = 76, x2 = 27, n2 = 78,
parmtype = "ratio", method = "score", midp = TRUE,
conf.int = TRUE
)
35 + 64
uncondExact2x2(
x1 = 35, n1 = 99, x2 = 52, n2 = 101,
parmtype = "ratio", method = "score", midp = FALSE,
conf.int = TRUE
)
uncondExact2x2(
x1 = 38, n1 = 99, x2 = 52, n2 = 101,
parmtype = "ratio", method = "score", midp = FALSE,
conf.int = TRUE
)
uncondExact2x2(
x1 = 38, n1 = 76, x2 = 27, n2 = 78,
parmtype = "ratio", method = "score", midp = FALSE,
conf.int = TRUE
)
uncondExact2x2(
x1 = 38, n1 = 75, x2 = 27, n2 = 78,
parmtype = "ratio", method = "score", midp = FALSE,
conf.int = TRUE
)
uncondExact2x2(
x1 = 38, n1 = 75, x2 = 27, n2 = 77,
parmtype = "ratio", method = "score", midp = FALSE,
conf.int = TRUE
)
uncondExact2x2(
x1 = 38, n1 = 74, x2 = 27, n2 = 77,
parmtype = "ratio", method = "score", midp = FALSE,
conf.int = TRUE
)
38 / 74
27 / 77
50 * .513
uncondExact2x2(
x1 = 26, n1 = 50, x2 = 27, n2 = 77,
parmtype = "ratio", method = "score", midp = FALSE,
conf.int = TRUE
)
70 * .513
uncondExact2x2(
x1 = 36, n1 = 70, x2 = 27, n2 = 77,
parmtype = "ratio", method = "score", midp = FALSE,
conf.int = TRUE
)
60 * .513
uncondExact2x2(
x1 = 31, n1 = 60, x2 = 27, n2 = 77,
parmtype = "ratio", method = "score", midp = FALSE,
conf.int = TRUE
)
65 * .513
uncondExact2x2(
x1 = 34, n1 = 65, x2 = 27, n2 = 77,
parmtype = "ratio", method = "score", midp = FALSE,
conf.int = TRUE
)
uncondExact2x2(
x1 = 35, n1 = 67, x2 = 27, n2 = 77,
parmtype = "ratio", method = "score", midp = FALSE,
conf.int = TRUE
)
uncondExact2x2(
x1 = 36, n1 = 68, x2 = 27, n2 = 77,
parmtype = "ratio", method = "score", midp = FALSE,
conf.int = TRUE
)
uncondExact2x2(
x1 = 37, n1 = 70, x2 = 27, n2 = 77,
parmtype = "ratio", method = "score", midp = FALSE,
conf.int = TRUE
)
uncondExact2x2(
x1 = 37, n1 = 70, x2 = 27, n2 = 70,
parmtype = "ratio", method = "score", midp = FALSE,
conf.int = TRUE
)
uncondExact2x2(
x1 = 37, n1 = 70, x2 = 37, n2 = 70,
parmtype = "ratio", method = "score", midp = FALSE,
conf.int = TRUE
)
uncondExact2x2(
x1 = 37, n1 = 70, x2 = 25, n2 = 70,
parmtype = "ratio", method = "score", midp = FALSE,
conf.int = TRUE
)
uncondExact2x2(
x1 = 37, n1 = 70, x2 = 27, n2 = 75,
parmtype = "ratio", method = "score", midp = FALSE,
conf.int = TRUE
)
uncondExact2x2(
x1 = 37, n1 = 70, x2 = 27, n2 = 75,
parmtype = "ratio", method = "score", midp = FALSE,
conf.int = TRUE, control = ucControl(nCIgrid = 1000)
)
uncondExact2x2(
x1 = 38, n1 = 75, x2 = 27, n2 = 78,
parmtype = "ratio", method = "score", midp = FALSE,
conf.int = TRUE, control = ucControl(nCIgrid = 1000)
)
install.packages("rpact")
dat <- rpact::getSimulationSurvival(piecewiseSurvivalTime = c(0, 5, 10),
lambda1 = log(2) / c(15, 15, 15),
lambda2 = log(2) / c(15, 15, 15),
plannedEvents = 200,
maxNumberOfSubjects = 300,
accrualTime = c(0,1),
accrualIntensity = c(300),
maxNumberOfIterations = 1,
maxNumberOfRawDatasetsPerStage = 1,
seed = 533) |> getRawData()
library(rpact)
dat <- rpact::getSimulationSurvival(piecewiseSurvivalTime = c(0, 5, 10),
lambda1 = log(2) / c(15, 15, 15),
lambda2 = log(2) / c(15, 15, 15),
plannedEvents = 200,
maxNumberOfSubjects = 300,
accrualTime = c(0,1),
accrualIntensity = c(300),
maxNumberOfIterations = 1,
maxNumberOfRawDatasetsPerStage = 1,
seed = 533) |> getRawData()
View(dat)
head(dat)
summary(dat)
dat$treatmentGroup <- factor(dat$treatmentGroup)
cox_fit <- survival::coxph(survival::Surv(timeUnderObservation, event) ~ treatmentGroup,
data = dat,
ties = "breslow")
cox_fit
library(stdReg)
stdReg2::standardize_coxph(survival::Surv(timeUnderObservation, event) ~ treatmentGroup,
data = dat,
values = list(treatmentGroup = c("1", "2")),
times = 12)
stdCoxph(cox_fit, dat, X = "treatmentGroup", x = c(1, 2))
stdCoxph(cox_fit, dat, X = "treatmentGroup", x = c(1, 2)) |> summary()
?stdCoxph
stdCoxph(cox_fit, dat, X = "treatmentGroup", x = c(1, 2), t = 12)
stdCoxph(cox_fit, dat, X = "treatmentGroup", x = c(1, 2), t = 12) |> summary()
stdReg2::standardize_coxph(survival::Surv(timeUnderObservation, event) ~ treatmentGroup,
data = dat,
values = list(treatmentGroup = c("1", "2")),
times = 12)
dat <- rpact::getSimulationSurvival(piecewiseSurvivalTime = c(0, 5, 10),
lambda1 = log(2) / c(15, 15, 15),
lambda2 = log(2) / c(15, 15, 15),
plannedEvents = 200,
maxNumberOfSubjects = 300,
accrualTime = c(0,1),
accrualIntensity = c(300),
maxNumberOfIterations = 1,
maxNumberOfRawDatasetsPerStage = 1,
seed = 533) |> getRawData()
cox_fit <- survival::coxph(survival::Surv(timeUnderObservation, event) ~ treatmentGroup,
data = dat,
ties = "breslow")
cox_fit
stdReg2::standardize_coxph(survival::Surv(timeUnderObservation, event) ~ treatmentGroup,
data = dat,
values = list(treatmentGroup = c(1, 2)),
times = 12)
stdCoxph(cox_fit, dat, X = "treatmentGroup", x = c(1, 2), t = 12) |> summary()
dat$treatmentGroup <- factor(dat$treatmentGroup, labels = c("treat", "control"))
cox_fit <- survival::coxph(survival::Surv(timeUnderObservation, event) ~ treatmentGroup,
data = dat,
ties = "breslow")
cox_fit
stdCoxph(cox_fit, dat, X = "treatmentGroup", t = 12) |> summary()
stdReg2::standardize_coxph(survival::Surv(timeUnderObservation, event) ~ treatmentGroup,
data = dat,
values = list(treatmentGroup = c(1, 2)),
times = 12)
stdReg2::standardize_coxph(survival::Surv(timeUnderObservation, event) ~ treatmentGroup,
data = dat,
values = list(treatmentGroup = c("treat", "control")),
times = 12)
standardize_coxph
stdReg2::standardize_coxph
stdReg2::standardize_coxph(survival::Surv(timeUnderObservation, event) ~ as.numeric(treatmentGroup),
data = dat,
values = list(treatmentGroup = c(1, 2)),
times = 12)
stdReg2::standardize_coxph(survival::Surv(timeUnderObservation, event) ~ I(as.numeric(treatmentGroup) - 1),
data = dat,
values = list(treatmentGroup = c(0, 1)),
times = 12)
####### estimate S(12) on both arms
library(stdReg2)
stdReg2::standardize_coxph(survival::Surv(timeUnderObservation, event) ~ treatmentGroup,
data = dat,
values = list(treatmentGroup = c(0, 1)),
times = 12)
stdReg2::standardize_coxph(survival::Surv(timeUnderObservation, event) ~ treatmentGroup,
data = dat,
values = list(treatmentGroup = c(1, 2)),
times = 12)
stdReg2::standardize_coxph(survival::Surv(timeUnderObservation, event) ~ factor(treatmentGroup),
data = dat,
values = list(treatmentGroup = c(1, 2)),
times = 12)
dat$treatmentGroup
stdReg2::standardize_coxph(survival::Surv(timeUnderObservation, event) ~ treatmentGroup,
data = dat,
values = list(treatmentGroup = c("treat", "control")),
times = 12)
dat$tx <- 1.0 * (dat$treatmentGroup == "treat")
stdReg2::standardize_coxph(survival::Surv(timeUnderObservation, event) ~ tx,
data = dat,
values = list(treatmentGroup = c(0, 1)),
times = 12)
stdReg2::standardize_coxph(survival::Surv(timeUnderObservation, event) ~ tx,
data = dat,
values = list(tx = c(0, 1)),
times = 12)
table(dat$tx)
stdReg2::standardize_coxph(survival::Surv(timeUnderObservation, event) ~ tx,
data = dat,
values = list(tx = c(1, 2)),
times = 12)
stdReg2::standardize_coxph(survival::Surv(timeUnderObservation, event) ~ tx,
data = dat,
values = list(tx = c(0, 1)),
times = 12)
table(as.numeric(dat$treatmentGroup))
stdCoxph(cox_fit, dat, X = "treatmentGroup", t = 12) |> summary()
dat$tx <- 1.0 * (dat$treatmentGroup == "treat")
cox_fit <- survival::coxph(survival::Surv(timeUnderObservation, event) ~ tx,
data = dat,
ties = "breslow")
stdCoxph(cox_fit, dat, X = "tx", t = 12) |> summary()
cox_fit <- survival::coxph(survival::Surv(timeUnderObservation, event) ~ as.numeric(treatmentGroup),
data = dat,
ties = "breslow")
stdCoxph(cox_fit, dat, X = "treatmentGroup", t = 12) |> summary()
cox_fit <- survival::coxph(survival::Surv(timeUnderObservation, event) ~ (treatmentGroup),
data = dat,
ties = "breslow")
library(stdReg)
stdCoxph(cox_fit, dat, X = "treatmentGroup", t = 12) |> summary()
dat$treatmentGroup <- factor(dat$treatmentGroup, labels = c("treat", "control"))
dat$tx <- 1.0 * (dat$treatmentGroup == "treat") + 1
cox_fit <- survival::coxph(survival::Surv(timeUnderObservation, event) ~ tx,
data = dat,
ties = "breslow")
library(stdReg)
stdCoxph(cox_fit, dat, X = "treatmentGroup", t = 12) |> summary()
stdReg2::standardize_coxph(survival::Surv(timeUnderObservation, event) ~ tx,
data = dat,
values = list(tx = c(1, 2)),
times = 12)
log(2)
?getSimulationSurvival
?is.binary
stdReg2:::is.binary()
stdReg2:::is.binary(dat$treatmentGroup)
standardize_coxph
time = rexp(500)
cens = rexp(500)
dat <- data.frame(Y = pmin(time, cens), event = 1.0 * (time <= cens), trt = rbinom(500, .5))
dat <- data.frame(Y = pmin(time, cens), event = 1.0 * (time <= cens), trt = rbinom(500, 1, .5))
dat
hist(time)
trueS <- pexp(2, lower.tail = FALSE)
trueS
dat <- rpact::getSimulationSurvival(piecewiseSurvivalTime = c(0, 5, 10),
lambda1 = log(2) / c(15, 15, 15),
lambda2 = log(2) / c(15, 15, 15),
plannedEvents = 200,
maxNumberOfSubjects = 300,
accrualTime = c(0,1),
accrualIntensity = c(300),
maxNumberOfIterations = 1,
maxNumberOfRawDatasetsPerStage = 1,
seed = 533) |> getRawData()
dat$treatmentGroup <- factor(dat$treatmentGroup, labels = c("treat", "control"))
dat$tx <- 1.0 * (dat$treatmentGroup == "treat") + 1
cox_fit <- survival::coxph(survival::Surv(timeUnderObservation, event) ~ tx,
data = dat,
ties = "breslow")
stdCoxph(cox_fit, dat, X = "treatmentGroup", t = 12) |> summary()
stdCoxph(cox_fit, dat, X = "tx", t = 12) |> summary()
stdCoxph(cox_fit, dat, X = "tx", x = 0:1, t = 12) |> summary()
standardize_coxph(Surv(Y, event) ~ trt, data = dat, values = list(trt = 0:1), times = 2)
trueS <- pexp(2, lower.tail = FALSE)
time = rexp(500)
cens = rexp(500)
dat <- data.frame(Y = pmin(time, cens), event = 1.0 * (time <= cens), trt = rbinom(500, 1, .5))
standardize_coxph(Surv(Y, event) ~ trt, data = dat, values = list(trt = 0:1), times = 2)
library(survival)
standardize_coxph(Surv(Y, event) ~ trt, data = dat, values = list(trt = 0:1), times = 2)
sfit <- standardize_coxph(Surv(Y, event) ~ trt, data = dat, values = list(trt = 0:1), times = 2)
sfit$res$est
tidy(sfit)
sfit <- tidy(standardize_coxph(Surv(Y, event) ~ trt, data = dat, values = list(trt = 0:1), times = 2))
sfit$lower.0.95 <= trueS & sfit$upper.0.95 >= trueS
test <- replicate(1000,  {
time = rexp(500)
cens = rexp(500)
dat <- data.frame(Y = pmin(time, cens), event = 1.0 * (time <= cens), trt = rbinom(500, 1, .5))
sfit <- tidy(standardize_coxph(Surv(Y, event) ~ trt, data = dat, values = list(trt = 0:1), times = 2))
sfit$lower.0.95 <= trueS & sfit$upper.0.95 >= trueS
})
test
rowMeans(test)
sfit
test <- replicate(4000,  {
time = rexp(500)
cens = rexp(500)
dat <- data.frame(Y = pmin(time, cens), event = 1.0 * (time <= cens), trt = rbinom(500, 1, .5))
sfit <- tidy(standardize_coxph(Surv(Y, event) ~ trt, data = dat, values = list(trt = 0:1), times = 2))
sfit$lower.0.95 <= trueS & sfit$upper.0.95 >= trueS
})
rowMeans(test)
trueS <- pexp(2, lower.tail = FALSE)
n <- 1000
test <- replicate(1000,  {
time = rexp(n)
cens = rexp(n)
dat <- data.frame(Y = pmin(time, cens), event = 1.0 * (time <= cens), trt = rbinom(n, 1, .5))
sfit <- tidy(standardize_coxph(Surv(Y, event) ~ trt, data = dat, values = list(trt = 0:1), times = 2))
sfit$lower.0.95 <= trueS & sfit$upper.0.95 >= trueS
})
rowMeans(test)
n <- 2000
test <- replicate(1000,  {
time = rexp(n)
cens = rexp(n)
dat <- data.frame(Y = pmin(time, cens), event = 1.0 * (time <= cens), trt = rbinom(n, 1, .5))
sfit <- tidy(standardize_coxph(Surv(Y, event) ~ trt, data = dat, values = list(trt = 0:1), times = 2))
sfit$lower.0.95 <= trueS & sfit$upper.0.95 >= trueS
})
rowMeans(test)
setwd("~/Code/dpm-comparison")
